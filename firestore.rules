rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Validate YYYY-MM-DD
    function isIsoDate(dateStr) {
      return dateStr is string && dateStr.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
    }

    // Users collection (profile) + user-owned subcollections
    match /users/{uid} {
      // Create only for self; if 'uid' field is present, it must match auth uid
      allow create: if isOwner(uid) &&
        (!('uid' in request.resource.data) || request.resource.data.uid == uid);

      // Owner can read/update/delete only their own doc;
      // If 'uid' is present on update, it must remain equal to auth uid.
      allow read: if isOwner(uid);
      allow update: if isOwner(uid) &&
        (!('uid' in request.resource.data) || request.resource.data.uid == uid);
      allow delete: if isOwner(uid);

      // User-owned subcollections
      match /customFoods/{doc} {
        allow read, create, update, delete: if isOwner(uid);
      }
      match /customExercises/{doc} {
        allow read, create, update, delete: if isOwner(uid);
      }
      match /favorites/{doc} {
        allow read, create, update, delete: if isOwner(uid);
      }
      match /achievements/{doc} {
        allow read, create, update, delete: if isOwner(uid);
      }
      match /plans/{doc} {
        // Save the curated AI plan at users/{uid}/plans/current (or any doc)
        allow read, create, update, delete: if isOwner(uid);
      }
    }

    // Daily activities: id format "{uid}_{YYYY-MM-DD}", doc must include userId == uid
    match /activities/{activityId} {
      allow create: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid &&
        // Validate the id format "{uid}_{YYYY-MM-DD}"
        activityId.matches('^' + request.auth.uid + '_[0-9]{4}-[0-9]{2}-[0-9]{2}$') &&
        isIsoDate(activityId.split('_')[1]);

      allow read: if isSignedIn() &&
        resource.data.userId == request.auth.uid;

      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;

      allow delete: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
    }

    // Conversations (AI assistant): id format "{uid}_{YYYY-MM-DD}", doc must include userId == uid
    match /conversations/{cid} {
      allow create: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid &&
        cid.matches('^' + request.auth.uid + '_[0-9]{4}-[0-9]{2}-[0-9]{2}$') &&
        isIsoDate(cid.split('_')[1]);

      allow read: if isSignedIn() &&
        resource.data.userId == request.auth.uid;

      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;

      allow delete: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}