diff --git a/src/config/firebase.ts b/src/config/firebase.ts
--- a/src/config/firebase.ts
+++ b/src/config/firebase.ts
@@ -1,4 +1,5 @@
 // src/config/firebase.ts
+/* eslint-disable no-console */
 import { initializeApp } from "firebase/app";
 import {
   getAuth,
@@ -18,7 +19,7 @@ const firebaseConfig = {
   apiKey: "AIzaSyBfFe-Pb2Ri-8SF4Qs7gZLERY0ueKBFOVE",
   authDomain: "vitalpath2.firebaseapp.com",
   projectId: "vitalpath2",
-  storageBucket: "vitalpath2.firebasestorage.app",
+  storageBucket: "vitalpath2.appspot.com",
   messagingSenderId: "863487646204",
   appId: "1:863487646204:web:b29a64500fd663af82ba79",
   measurementId: "G-ZLWKSDY5JS",
diff --git a/src/utils/notifications.ts b/src/utils/notifications.ts
--- a/src/utils/notifications.ts
+++ b/src/utils/notifications.ts
@@ -1,6 +1,20 @@
 // src/utils/notifications.ts
 import * as Notifications from "expo-notifications";
 import { Platform } from "react-native";
 
 export type MealReminder = { hour: number; minute: number; label: string };
 
+// Ensure notifications display when app is foregrounded
+export function configureForegroundNotifications() {
+  Notifications.setNotificationHandler({
+    handleNotification: async () => ({
+      shouldShowAlert: true,
+      shouldPlaySound: true,
+      shouldSetBadge: false,
+    }),
+  });
+}
+
 async function ensurePermission() {
   const settings = await Notifications.getPermissionsAsync();
   if (settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL) {
diff --git a/app/index.tsx b/app/index.tsx
--- a/app/index.tsx
+++ b/app/index.tsx
@@ -31,6 +31,7 @@ import LibraryScreen from "./LibraryScreen";
 
 import ErrorBoundary from "../src/components/ErrorBoundary";
 import { ThemeProvider, useTheme } from "../src/ui/ThemeProvider";
 import { ToastProvider } from "../src/ui/components/Toast";
+import { configureForegroundNotifications } from "../src/utils/notifications";
 
 export type RootTabParamList = {
   Home: undefined;
@@ -120,7 +121,9 @@ function AppShell() {
   const { theme } = useTheme();
 
   useEffect(() => {
     applyAccessibilityDefaults();
+    // So scheduled notifications also show while app is open
+    configureForegroundNotifications();
   }, []);
 
   if (!user) return <AuthScreen />;
diff --git a/app/AuthScreen.tsx b/app/AuthScreen.tsx
--- a/app/AuthScreen.tsx
+++ b/app/AuthScreen.tsx
@@ -10,6 +10,8 @@ import {
   SafeAreaView,
   ScrollView,
   ActivityIndicator,
+  KeyboardAvoidingView,
+  Platform,
 } from "react-native";
 import { Ionicons } from "@expo/vector-icons";
 import { useAuth } from "../src/context/AuthContext";
@@ -103,12 +105,20 @@ export default function AuthScreen() {
 
   return (
-    <SafeAreaView
-      style={{ flex: 1, backgroundColor: theme.colors.appBg }}
-    >
-      <ScrollView contentContainerStyle={styles.content} bounces={false}>
+    <SafeAreaView style={{ flex: 1, backgroundColor: theme.colors.appBg }}>
+      <KeyboardAvoidingView
+        style={{ flex: 1 }}
+        behavior={Platform.OS === "ios" ? "padding" : undefined}
+        keyboardVerticalOffset={Platform.OS === "ios" ? 64 : 0}
+      >
+        <ScrollView
+          contentContainerStyle={styles.content}
+          bounces={false}
+          keyboardShouldPersistTaps="handled"
+          contentInsetAdjustmentBehavior="automatic"
+        >
         {/* content unchanged below */}
-      </ScrollView>
+        </ScrollView>
+      </KeyboardAvoidingView>
     </SafeAreaView>
   );
 }
diff --git a/app/ProfileSetupScreen.tsx b/app/ProfileSetupScreen.tsx
--- a/app/ProfileSetupScreen.tsx
+++ b/app/ProfileSetupScreen.tsx
@@ -12,6 +12,7 @@ import {
   SafeAreaView,
   Alert,
   Platform,
+  KeyboardAvoidingView,
 } from "react-native";
 import { Picker } from "@react-native-picker/picker";
 import { httpsCallable } from "firebase/functions";
@@ -238,9 +239,17 @@ export default function ProfileSetupScreen() {
 
   return (
-    <SafeAreaView style={{ flex: 1, backgroundColor: theme.colors.appBg }}>
-      <ScrollView contentContainerStyle={{ padding: 16, paddingBottom: 24 }}>
+    <SafeAreaView style={{ flex: 1, backgroundColor: theme.colors.appBg }}>
+      <KeyboardAvoidingView
+        style={{ flex: 1 }}
+        behavior={Platform.OS === "ios" ? "padding" : undefined}
+        keyboardVerticalOffset={Platform.OS === "ios" ? 64 : 0}
+      >
+        <ScrollView
+          contentContainerStyle={{ padding: 16, paddingBottom: 24 }}
+          keyboardShouldPersistTaps="handled"
+          contentInsetAdjustmentBehavior="automatic"
+        >
         {/* content unchanged below */}
-      </ScrollView>
+        </ScrollView>
+      </KeyboardAvoidingView>
     </SafeAreaView>
   );
 }
diff --git a/src/components/FoodSearchModal.tsx b/src/components/FoodSearchModal.tsx
--- a/src/components/FoodSearchModal.tsx
+++ b/src/components/FoodSearchModal.tsx
@@ -14,6 +14,7 @@ import {
   FlatList,
   ListRenderItemInfo,
   ViewToken,
+  KeyboardAvoidingView,
 } from "react-native";
 import { colors as baseColors } from "../constants/colors";
 import { fonts } from "../constants/fonts";
@@ -170,8 +171,13 @@ export default function FoodSearchModal({ visible, onClose }: Props) {
   return (
     <Modal visible={visible} transparent animationType="slide" onRequestClose={onClose}>
       <View style={styles.overlay}>
-        <View
+        <KeyboardAvoidingView
+          behavior={Platform.OS === "ios" ? "padding" : undefined}
+          keyboardVerticalOffset={Platform.OS === "ios" ? 64 : 0}
+        >
+        <View
           style={[
             styles.sheet,
             { backgroundColor: theme.colors.surface, borderTopColor: theme.colors.border },
           ]}
         >
@@ -263,10 +269,12 @@ export default function FoodSearchModal({ visible, onClose }: Props) {
               getItemLayout={getItemLayout}
               initialNumToRender={12}
               windowSize={8}
               removeClippedSubviews
               showsVerticalScrollIndicator={false}
+              keyboardShouldPersistTaps="handled"
               accessibilityLabel="Food search results"
               contentContainerStyle={{ paddingBottom: 8 }}
               style={{ maxHeight: "70%" }}
             />
           )}
         </View>
+        </KeyboardAvoidingView>
       </View>
     </Modal>
   );
diff --git a/src/components/QuickEditMealModal.tsx b/src/components/QuickEditMealModal.tsx
--- a/src/components/QuickEditMealModal.tsx
+++ b/src/components/QuickEditMealModal.tsx
@@ -9,6 +9,7 @@ import {
   TouchableOpacity,
   TextInput,
   ScrollView,
+  KeyboardAvoidingView,
 } from "react-native";
 import { Picker } from "@react-native-picker/picker";
 import { colors as baseColors } from "../constants/colors";
@@ -103,8 +104,13 @@ export default function QuickEditMealModal({
   return (
     <Modal visible={visible} transparent animationType="slide">
       <View style={styles.overlay}>
-        <View
+        <KeyboardAvoidingView
+          behavior={Platform.OS === "ios" ? "padding" : undefined}
+          keyboardVerticalOffset={Platform.OS === "ios" ? 64 : 0}
+        >
+        <View
           style={[
             styles.sheet,
             { backgroundColor: theme.colors.surface, borderTopColor: theme.colors.border },
           ]}
         >
@@ -114,10 +120,12 @@ export default function QuickEditMealModal({
             </TouchableOpacity>
           </View>
 
-          <ScrollView
+          <ScrollView
             style={{ maxHeight: "82%" }}
             showsVerticalScrollIndicator={false}
             contentContainerStyle={{ paddingBottom: 8 }}
+            keyboardShouldPersistTaps="handled"
           >
             {/* inputs unchanged */}
           </ScrollView>
@@ -147,6 +155,7 @@ export default function QuickEditMealModal({
           >
             <Text style={styles.saveText}>Save Meal</Text>
           </TouchableOpacity>
         </View>
+        </KeyboardAvoidingView>
       </View>
     </Modal>
   );
diff --git a/src/components/MealsModal.tsx b/src/components/MealsModal.tsx
--- a/src/components/MealsModal.tsx
+++ b/src/components/MealsModal.tsx
@@ -1,17 +1,19 @@
 // src/components/MealsModal.tsx
 import React, { useMemo, useState } from "react";
 import {
   Modal,
   View,
   Text,
   StyleSheet,
   TouchableOpacity,
   TextInput,
   ScrollView,
   Alert,
+  KeyboardAvoidingView,
+  Platform,
 } from "react-native";
 import { Picker } from "@react-native-picker/picker";
-import { useActivity } from "../../src/context/ActivityContext";
-import { fonts } from "../../src/constants/fonts";
-import { useTheme } from "../../src/ui/ThemeProvider";
-import { useToast } from "../../src/ui/components/Toast";
-import { useHaptics } from "../../src/ui/hooks/useHaptics";
+import { useActivity } from "../context/ActivityContext";
+import { fonts } from "../constants/fonts";
+import { useTheme } from "../ui/ThemeProvider";
+import { useToast } from "../ui/components/Toast";
+import { useHaptics } from "../ui/hooks/useHaptics";
@@ -56,10 +58,17 @@ export default function MealsModal({ visible, onClose }: Props) {
   return (
     <Modal visible={visible} transparent animationType="slide">
       <View style={styles.overlay}>
-        <View
+        <KeyboardAvoidingView
+          behavior={Platform.OS === "ios" ? "padding" : undefined}
+          keyboardVerticalOffset={Platform.OS === "ios" ? 64 : 0}
+        >
+        <View
           style={[
             styles.sheet,
             { backgroundColor: theme.colors.surface, borderTopColor: theme.colors.border },
           ]}
         >
@@ -107,7 +116,11 @@ export default function MealsModal({ visible, onClose }: Props) {
             </Text>
           </View>
 
-          <ScrollView style={{ flex: 1 }} showsVerticalScrollIndicator={false}>
+          <ScrollView
+            style={{ flex: 1 }}
+            showsVerticalScrollIndicator={false}
+            keyboardShouldPersistTaps="handled"
+          >
             {(todayActivity?.meals || []).map((m) => (
               <View
                 key={m.id}
@@ -178,6 +191,7 @@ export default function MealsModal({ visible, onClose }: Props) {
             </TouchableOpacity>
           </View>
         </View>
+        </KeyboardAvoidingView>
       </View>
     </Modal>
   );
diff --git a/src/services/foodDb.ts b/src/services/foodDb.ts
--- a/src/services/foodDb.ts
+++ b/src/services/foodDb.ts
@@ -1,3 +1,4 @@
 import AsyncStorage from "@react-native-async-storage/async-storage";
+// Note: we export TEMPLATES at the end for Home screen quick-adds
 import {
   addDoc,
   collection,
@@ -73,6 +74,31 @@ const LOCAL_FOODS: FoodItem[] = [
   },
 ];
 
+// Simple quick-add templates used on the Home screen
+export const TEMPLATES: Array<{
+  name: string;
+  type: "breakfast" | "lunch" | "dinner" | "snack";
+  calories: number;
+  protein: number;
+  carbs: number;
+  fat: number;
+}> = [
+  {
+    name: "Chicken & Rice",
+    type: "lunch",
+    calories: 600,
+    protein: 40,
+    carbs: 70,
+    fat: 15,
+  },
+  {
+    name: "Yogurt + Berries",
+    type: "breakfast",
+    calories: 250,
+    protein: 15,
+    carbs: 35,
+    fat: 5,
+  },
+  {
+    name: "Omelette + Toast",
+    type: "breakfast",
+    calories: 450,
+    protein: 25,
+    carbs: 35,
+    fat: 18,
+  },
+];
+
 const TTL_MS = 7 * 24 * 60 * 60 * 1000;
 
 async function getCache<T>(k: string, ttl = TTL_MS): Promise<T | null> {
diff --git a/app/DietaryScreen.tsx b/app/DietaryScreen.tsx
--- a/app/DietaryScreen.tsx
+++ b/app/DietaryScreen.tsx
@@ -1,16 +1,18 @@
 import React, { useEffect, useMemo, useState } from "react";
 import {
   View,
   Text,
   StyleSheet,
   ScrollView,
-  TouchableOpacity
+  TouchableOpacity,
   SafeAreaView,
   TextInput,
   Modal,
   Alert,
   Dimensions,
   Platform,
   Image,
   Share,
+  KeyboardAvoidingView,
 } from "react-native";
 import { Ionicons } from "@expo/vector-icons";
 import * as ImagePicker from "expo-image-picker";
@@ -21,13 +23,13 @@ import AsyncStorage from "@react-native-async-storage/async-storage";
 import { useNavigation } from "@react-navigation/native";
 import { doc, getDoc } from "firebase/firestore";
 
 import { useAuth } from "../src/context/AuthContext";
 import { useActivity } from "../src/context/ActivityContext";
-import { colors } from "../src/constants/colors";
 import { fonts } from "../src/constants/fonts";
 import { db } from "../src/config/firebase";
+import { useTheme } from "../src/ui/ThemeProvider";
 
 import MealsModal from "../src/components/MealsModal";
 import WorkoutsModal from "../src/components/WorkoutsModal";
 import FoodSearchModal from "../src/components/FoodSearchModal";
@@ -47,6 +49,7 @@ import {
   analyzeMealImageBase64,
   MealImageAnalysis,
 } from "../src/services/healthAI";
 
 const { width } = Dimensions.get("window");
 
 export default function DietaryScreen() {
+  const { theme } = useTheme();
   const navigation = useNavigation<any>();
   const { userProfile, user } = useAuth();
   const {
     todayActivity,
@@ -112,7 +115,10 @@ export default function DietaryScreen() {
   ];
 
   return (
-    <SafeAreaView style={styles.container}>
+    <SafeAreaView
+      style={[styles.container, { backgroundColor: theme.colors.appBg }]}
+    >
       <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
         {/* Header */}
         <View style={styles.header}>
           <View style={{ flex: 1 }}>
-            <Text style={styles.greeting}>
+            <Text style={[styles.greeting, { color: theme.colors.text }]}>
               Hey {firstName(userProfile?.name)} 👋
             </Text>
-            <Text style={styles.date}>
+            <Text style={[styles.date, { color: theme.colors.textMuted }]}>
               {new Date().toLocaleDateString(undefined, {
                 weekday: "short",
                 month: "long",
                 day: "numeric",
               })}
             </Text>
           </View>
-          <View style={styles.summaryPill}>
-            <Ionicons name="flame" size={16} color={colors.primary} />
-            <Text style={styles.summaryPillText}>
+          <View
+            style={[
+              styles.summaryPill,
+              {
+                backgroundColor: theme.colors.surface,
+                borderColor: theme.colors.border,
+              },
+            ]}
+          >
+            <Ionicons name="flame" size={16} color={theme.colors.primary} />
+            <Text
+              style={[styles.summaryPillText, { color: theme.colors.primary }]}
+            >
               {progress.caloriesRemaining} kcal left
             </Text>
           </View>
           <TouchableOpacity
             onPress={handleShareToday}
-            style={styles.shareBtn}
+            style={[
+              styles.shareBtn,
+              {
+                backgroundColor: theme.colors.surface,
+                borderColor: theme.colors.border,
+              },
+            ]}
             accessibilityLabel="Share today"
           >
-            <Ionicons name="share-social-outline" size={18} color={colors.primary} />
+            <Ionicons
+              name="share-social-outline"
+              size={18}
+              color={theme.colors.primary}
+            />
           </TouchableOpacity>
         </View>
 
         {/* Onboarding Checklist */}
         <OnboardingChecklist
@@ -136,7 +142,10 @@ export default function DietaryScreen() {
         />
 
         {/* Coach + Achievements + Goals */}
-        <DailyCoach
+        <DailyCoach
           name={userProfile?.name}
           caloriesRemaining={progress.caloriesRemaining}
           steps={todayActivity?.steps || 0}
           waterMl={todayActivity?.waterIntake || 0}
           proteinPct={progress.macrosProgress.protein}
         />
         <Achievements uid={user?.uid || "anon"} newly={newBadges} />
-        <DailyGoals
+        <DailyGoals
           steps={todayActivity?.steps || 0}
           waterMl={todayActivity?.waterIntake || 0}
           proteinG={todayActivity?.macros?.protein || 0}
           proteinTarget={userProfile?.macros?.protein || 0}
           calories={todayActivity?.totalCalories || 0}
@@ -148,12 +157,18 @@ export default function DietaryScreen() {
         />
 
         {/* Overview */}
-        <View style={styles.card}>
-          <Text style={styles.cardTitle}>Today’s Overview</Text>
+        <View
+          style={[styles.card, { backgroundColor: theme.colors.surface }]}
+        >
+          <Text style={[styles.cardTitle, { color: theme.colors.text }]}>
+            Today’s Overview
+          </Text>
 
           <View style={styles.overviewRow}>
             <OverviewItem
               icon="flame"
               label="Calories"
               value={`${progress.caloriesConsumed}/${
                 userProfile?.dailyCalories || 0
               }`}
               sub="consumed / goal"
             />
             <Separator />
             <OverviewItem
               icon="walk"
               label="Steps"
               value={`${todayActivity?.steps || 0}`}
               sub="today"
             />
             <Separator />
             <OverviewItem
               icon="water"
               label="Water"
               value={`${todayActivity?.waterIntake || 0} ml`}
               sub="today"
             />
           </View>
 
           {/* Macro bars */}
           <View style={{ marginTop: 14 }}>
             {macroBars.map((m) => (
               <MacroBar
                 key={m.key}
                 color={m.color}
                 label={m.label}
                 current={m.current}
                 target={m.target}
                 pct={m.pct}
               />
             ))}
           </View>
         </View>
 
         {/* Quick Actions */}
-        <View style={styles.card}>
-          <Text style={styles.cardTitle}>Quick Actions</Text>
+        <View
+          style={[styles.card, { backgroundColor: theme.colors.surface }]}
+        >
+          <Text style={[styles.cardTitle, { color: theme.colors.text }]}>
+            Quick Actions
+          </Text>
           <View style={styles.actionsGrid}>
             <ActionTile
               icon="add"
               label="Add Steps"
-              color={colors.primary}
+              color={theme.colors.primary}
               onPress={() => setShowStepsModal(true)}
             />
             <ActionTile
               icon="water"
               label="Add Water"
               color="#4ECDC4"
               onPress={() => setShowWaterModal(true)}
             />
             <ActionTile
               icon="fitness"
               label="Workouts"
               color="#FF6B6B"
               onPress={() => setShowWorkoutsModal(true)}
             />
             <ActionTile
               icon="restaurant"
               label="Meals"
               color="#FFA726"
               onPress={() => setShowMealsModal(true)}
             />
           </View>
         </View>
 
         {/* Meals */}
-        <View style={styles.card}>
-          <Text style={styles.cardTitle}>Meals</Text>
+        <View
+          style={[styles.card, { backgroundColor: theme.colors.surface }]}
+        >
+          <Text style={[styles.cardTitle, { color: theme.colors.text }]}>
+            Meals
+          </Text>
 
           <Text style={styles.sectionTitle}>1‑Tap Templates</Text>
           <View style={styles.chipsRow}>
             <Chip
               onPress={() => quickAddTemplate(0)}
               text="Chicken & Rice • 600"
             />
             <Chip
               onPress={() => quickAddTemplate(1)}
               text="Yogurt + Berries • 250"
             />
             <Chip
               onPress={() => quickAddTemplate(2)}
               text="Omelette + Toast • 450"
             />
           </View>
 
           {favorites.length > 0 && (
             <>
               <Text style={styles.sectionTitle}>Favorites</Text>
               <View style={styles.chipsWrap}>
                 {favorites.slice(0, 6).map((f) => (
                   <Chip
                     key={f.id}
                     text={`★ ${trimText(f.name, 18)} • ${Math.round(
                       f.calories
                     )}`}
                     onPress={async () => {
                       await addMeal({
                         name: f.name,
                         calories: f.calories,
                         macros: {
                           protein: f.protein,
                           carbs: f.carbs,
                           fat: f.fat,
                         },
                         micros: {},
                         type: f.type,
                       });
                       Alert.alert("Added", `${f.name} logged!`);
                     }}
                   />
                 ))}
               </View>
             </>
           )}
 
           <View style={styles.chipsRow}>
             <Chip
               text="Search Foods…"
               outline
               onPress={() => setShowFoodSearch(true)}
             />
             <Chip
               text="Breakfast +400"
               onPress={() => quickAddMeal("breakfast", 400)}
             />
             <Chip text="Lunch +600" onPress={() => quickAddMeal("lunch", 600)} />
             <Chip
               text="Dinner +700"
               onPress={() => quickAddMeal("dinner", 700)}
             />
             <Chip text="Snack +200" onPress={() => quickAddMeal("snack", 200)} />
             <Chip text="Repeat Yesterday" onPress={repeatYesterday} />
           </View>
         </View>
 
         {/* Tools */}
-        <View style={styles.card}>
-          <Text style={styles.cardTitle}>Tools</Text>
+        <View
+          style={[styles.card, { backgroundColor: theme.colors.surface }]}
+        >
+          <Text style={[styles.cardTitle, { color: theme.colors.text }]}>
+            Tools
+          </Text>
           <View style={styles.toolsRow}>
             <ToolButton
               icon="camera"
               label={analyzing ? "Analyzing…" : "Take/Upload Meal Photo"}
               onPress={pickOrTakeAndAnalyzeMeal}
               disabled={analyzing}
             />
             <ToolButton
               icon="moon"
               label="Set Sleep"
               onPress={() => setShowSleepModal(true)}
             />
             <ToolButton icon="refresh" label="Sync Steps" onPress={syncDeviceSteps} />
             <ToolButton
               icon="notifications"
               label="Water ON"
               onPress={onWaterRemindersOn}
             />
             <ToolButton
               icon="notifications"
               label="Meals ON"
               onPress={onMealRemindersOn}
             />
             <ToolButton
               icon="notifications-off"
               label="Reminders OFF"
               onPress={onRemindersOff}
             />
           </View>
 
           {imgUri && analysis && (
             <View style={[styles.previewWrap, { marginTop: 12, backgroundColor: theme.colors.surface, borderColor: theme.colors.border }]}>
               <Image
                 source={{ uri: imgUri }}
                 style={{ width: "100%", height: 180, borderRadius: 8 }}
               />
-              <Text style={[styles.gray, { marginTop: 6 }]}>
+              <Text style={{ marginTop: 6, color: theme.colors.textMuted, fontFamily: fonts.regular }}>
                 Logged: {analysis.name} • {Math.round(analysis.calories)} kcal
               </Text>
             </View>
           )}
         </View>
       </ScrollView>
 
       {/* Steps Modal */}
       <Modal visible={showStepsModal} transparent animationType="slide">
         <View style={styles.modalOverlay}>
-          <View style={styles.modalContent}>
-            <Text style={styles.modalTitle}>Add Steps</Text>
-            <TextInput
-              style={styles.modalInput}
+          <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : undefined} keyboardVerticalOffset={Platform.OS === "ios" ? 64 : 0}>
+          <View style={[styles.modalContent, { backgroundColor: theme.colors.surface }]}>
+            <Text style={[styles.modalTitle, { color: theme.colors.text }]}>Add Steps</Text>
+            <TextInput
+              style={[styles.modalInput, { backgroundColor: theme.colors.surface2, color: theme.colors.text }]}
               value={stepsInput}
               onChangeText={setStepsInput}
               placeholder="Enter steps count"
               keyboardType="numeric"
             />
             <View style={styles.modalButtons}>
               <TouchableOpacity
-                style={styles.modalButton}
+                style={[styles.modalButton, { backgroundColor: theme.colors.surface2 }]}
                 onPress={() => setShowStepsModal(false)}
               >
-                <Text style={styles.modalButtonText}>Cancel</Text>
+                <Text style={[styles.modalButtonText, { color: theme.colors.text }]}>Cancel</Text>
               </TouchableOpacity>
               <TouchableOpacity
-                style={[styles.modalButton, styles.primaryModalButton]}
+                style={[styles.modalButton, styles.primaryModalButton, { backgroundColor: theme.colors.primary }]}
                 onPress={handleAddSteps}
               >
                 <Text
                   style={[
                     styles.modalButtonText,
-                    styles.primaryModalButtonText,
+                    { color: "#fff" },
                   ]}
                 >
                   Add
                 </Text>
               </TouchableOpacity>
             </View>
           </View>
+          </KeyboardAvoidingView>
         </View>
       </Modal>
 
       {/* Water Modal */}
       <Modal visible={showWaterModal} transparent animationType="slide">
         <View style={styles.modalOverlay}>
-          <View style={styles.modalContent}>
-            <Text style={styles.modalTitle}>Add Water</Text>
-            <TextInput
-              style={styles.modalInput}
+          <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : undefined} keyboardVerticalOffset={Platform.OS === "ios" ? 64 : 0}>
+          <View style={[styles.modalContent, { backgroundColor: theme.colors.surface }]}>
+            <Text style={[styles.modalTitle, { color: theme.colors.text }]}>Add Water</Text>
+            <TextInput
+              style={[styles.modalInput, { backgroundColor: theme.colors.surface2, color: theme.colors.text }]}
               value={waterInput}
               onChangeText={setWaterInput}
               placeholder="Enter amount in ml"
               keyboardType="numeric"
             />
             <View style={styles.quickWaterButtons}>
-              <QuickWater onPress={() => quickAddWater(250)} label="250 ml" />
-              <QuickWater onPress={() => quickAddWater(500)} label="500 ml" />
-              <QuickWater onPress={() => quickAddWater(750)} label="750 ml" />
+              <QuickWater onPress={() => quickAddWater(250)} label="250 ml" />
+              <QuickWater onPress={() => quickAddWater(500)} label="500 ml" />
+              <QuickWater onPress={() => quickAddWater(750)} label="750 ml" />
             </View>
             <View style={styles.modalButtons}>
               <TouchableOpacity
-                style={styles.modalButton}
+                style={[styles.modalButton, { backgroundColor: theme.colors.surface2 }]}
                 onPress={() => setShowWaterModal(false)}
               >
-                <Text style={styles.modalButtonText}>Cancel</Text>
+                <Text style={[styles.modalButtonText, { color: theme.colors.text }]}>Cancel</Text>
               </TouchableOpacity>
               <TouchableOpacity
-                style={[styles.modalButton, styles.primaryModalButton]}
+                style={[styles.modalButton, styles.primaryModalButton, { backgroundColor: theme.colors.primary }]}
                 onPress={handleAddWater}
               >
                 <Text
                   style={[
                     styles.modalButtonText,
-                    styles.primaryModalButtonText,
+                    { color: "#fff" },
                   ]}
                 >
                   Add
                 </Text>
               </TouchableOpacity>
             </View>
           </View>
+          </KeyboardAvoidingView>
         </View>
       </Modal>
 
       {/* Sleep Modal */}
       <Modal visible={showSleepModal} transparent animationType="slide">
         <View style={styles.modalOverlay}>
-          <View style={styles.modalContent}>
-            <Text style={styles.modalTitle}>Set Sleep Hours</Text>
-            <TextInput
-              style={styles.modalInput}
+          <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : undefined} keyboardVerticalOffset={Platform.OS === "ios" ? 64 : 0}>
+          <View style={[styles.modalContent, { backgroundColor: theme.colors.surface }]}>
+            <Text style={[styles.modalTitle, { color: theme.colors.text }]}>Set Sleep Hours</Text>
+            <TextInput
+              style={[styles.modalInput, { backgroundColor: theme.colors.surface2, color: theme.colors.text }]}
               value={sleepInput}
               onChangeText={setSleepInput}
               placeholder="e.g., 7.5"
               keyboardType="decimal-pad"
             />
             <View style={styles.modalButtons}>
               <TouchableOpacity
-                style={styles.modalButton}
+                style={[styles.modalButton, { backgroundColor: theme.colors.surface2 }]}
                 onPress={() => setShowSleepModal(false)}
               >
-                <Text style={styles.modalButtonText}>Cancel</Text>
+                <Text style={[styles.modalButtonText, { color: theme.colors.text }]}>Cancel</Text>
               </TouchableOpacity>
               <TouchableOpacity
-                style={[styles.modalButton, styles.primaryModalButton]}
+                style={[styles.modalButton, styles.primaryModalButton, { backgroundColor: theme.colors.primary }]}
                 onPress={handleSetSleep}
               >
                 <Text
                   style={[
                     styles.modalButtonText,
-                    styles.primaryModalButtonText,
+                    { color: "#fff" },
                   ]}
                 >
                   Save
                 </Text>
               </TouchableOpacity>
             </View>
           </View>
+          </KeyboardAvoidingView>
         </View>
       </Modal>
 
@@ -501,25 +598,25 @@ function OverviewItem({
   sub?: string;
 }) {
+  const { theme } = useTheme();
   return (
     <View style={styles.overviewItem}>
-      <View style={styles.overviewIcon}>
-        <Ionicons name={icon} size={16} color={colors.primary} />
+      <View style={styles.overviewIcon}>
+        <Ionicons name={icon} size={16} color={theme.colors.primary} />
       </View>
-      <Text style={styles.overviewLabel}>{label}</Text>
-      <Text style={styles.overviewValue}>{value}</Text>
-      {sub ? <Text style={styles.overviewSub}>{sub}</Text> : null}
+      <Text style={[styles.overviewLabel, { color: theme.colors.textMuted }]}>{label}</Text>
+      <Text style={[styles.overviewValue, { color: theme.colors.text }]}>{value}</Text>
+      {sub ? <Text style={[styles.overviewSub, { color: theme.colors.textMuted }]}>{sub}</Text> : null}
     </View>
   );
 }
 
 function Separator() {
   return <View style={styles.separator} />;
 }
 
 function MacroBar({
   label,
   current,
   target,
   pct,
   color,
 }: {
   label: string;
   current: number;
   target: number;
   pct: number;
   color: string;
 }) {
+  const { theme } = useTheme();
   return (
     <View style={{ marginBottom: 10 }}>
       <View style={styles.macroHeader}>
-        <Text style={styles.macroLabel}>{label}</Text>
+        <Text style={[styles.macroLabel, { color: theme.colors.text }]}>{label}</Text>
         <Text style={styles.macroVal}>
           {Math.round(current)} / {Math.round(target)} g
         </Text>
       </View>
-      <View style={[styles.barTrack, { backgroundColor: `${color}20` }]}>
+      <View style={[styles.barTrack, { backgroundColor: theme.colors.surface2 }]}>
         <View
           style={[styles.barFill, { width: `${pct}%`, backgroundColor: color }]}
         />
       </View>
     </View>
   );
 }
 
 function ActionTile({
   icon,
   label,
   color,
   onPress,
 }: {
   icon: keyof typeof Ionicons.glyphMap;
   label: string;
   color: string;
   onPress: () => void;
 }) {
+  const { theme } = useTheme();
   return (
     <TouchableOpacity
       style={styles.actionTile}
       onPress={onPress}
       accessibilityRole="button"
       accessibilityLabel={label}
     >
       <View style={[styles.actionIconWrap, { backgroundColor: `${color}15` }]}>
-        <Ionicons name={icon} size={20} color={color} />
+        <Ionicons name={icon} size={20} color={color} />
       </View>
-      <Text style={styles.actionLabel}>{label}</Text>
+      <Text style={[styles.actionLabel, { color: theme.colors.text }]}>{label}</Text>
     </TouchableOpacity>
   );
 }
 
 function Chip({
   text,
   onPress,
   outline = false,
 }: {
   text: string;
   onPress: () => void;
   outline?: boolean;
 }) {
+  const { theme } = useTheme();
   return (
     <TouchableOpacity
       style={[
         styles.chip,
         outline
           ? {
-              backgroundColor: colors.white,
-              borderColor: colors.primary,
+              backgroundColor: theme.colors.surface,
+              borderColor: theme.colors.primary,
               borderWidth: 1,
             }
-          : {},
+          : { backgroundColor: theme.colors.primary },
       ]}
       onPress={onPress}
     >
       <Text
         style={[
           styles.chipText,
-          outline ? { color: colors.primary } : { color: colors.white },
+          outline ? { color: theme.colors.primary } : { color: "#fff" },
         ]}
         numberOfLines={1}
       >
         {text}
       </Text>
     </TouchableOpacity>
   );
 }
 
 function ToolButton({
   icon,
   label,
   onPress,
   disabled,
 }: {
   icon: keyof typeof Ionicons.glyphMap;
   label: string;
   onPress: () => void;
   disabled?: boolean;
 }) {
+  const { theme } = useTheme();
   return (
     <TouchableOpacity
-      style={[styles.toolBtn, disabled && { opacity: 0.6 }]}
+      style={[
+        styles.toolBtn,
+        { backgroundColor: theme.colors.surface, borderColor: theme.colors.border },
+        disabled && { opacity: 0.6 },
+      ]}
       onPress={onPress}
       disabled={disabled}
       accessibilityRole="button"
       accessibilityLabel={label}
     >
-      <Ionicons name={icon} size={18} color={colors.primary} />
-      <Text style={styles.toolBtnText}>{label}</Text>
+      <Ionicons name={icon} size={18} color={theme.colors.primary} />
+      <Text style={[styles.toolBtnText, { color: theme.colors.text }]}>{label}</Text>
     </TouchableOpacity>
   );
 }
@@ -591,7 +688,7 @@ const styles = StyleSheet.create({
   container: { flex: 1, backgroundColor: "#00000000" },
   loadingContainer: { flex: 1, justifyContent: "center", alignItems: "center" },
   content: { flex: 1, padding: 16 },
   header: { flexDirection: "row", alignItems: "center", marginBottom: 14 },
-  greeting: { fontSize: 22, fontFamily: fonts.bold, color: "#000" },
-  date: { fontSize: 13, fontFamily: fonts.regular, color: "#8E8E93", marginTop: 2 },
+  greeting: { fontSize: 22, fontFamily: fonts.bold },
+  date: { fontSize: 13, fontFamily: fonts.regular, marginTop: 2 },
   summaryPill: {
     flexDirection: "row",
     alignItems: "center",
     gap: 6,
-    backgroundColor: "#FFFFFF",
     paddingHorizontal: 12,
     paddingVertical: 8,
     borderRadius: 16,
     borderWidth: 1,
-    borderColor: "#E5E5E5",
     ...Platform.select({
       web: { boxShadow: "0 2px 12px rgba(0,0,0,0.06)" } as any,
       default: {
         shadowColor: "#000",
         shadowOffset: { width: 0, height: 2 },
         shadowOpacity: 0.12,
         shadowRadius: 6,
         elevation: 3,
       },
     }),
   },
-  summaryPillText: { fontFamily: fonts.semiBold, color: "#007AFF", fontSize: 12 },
+  summaryPillText: { fontFamily: fonts.semiBold, fontSize: 12 },
   shareBtn: {
     marginLeft: 8,
     paddingHorizontal: 10,
     paddingVertical: 8,
     borderRadius: 12,
     borderWidth: 1,
-    borderColor: "#E5E5E5",
-    backgroundColor: "#FFFFFF",
   },
-  card: { backgroundColor: "#FFFFFF", borderRadius: 16, padding: 16, marginBottom: 16,
+  card: { borderRadius: 16, padding: 16, marginBottom: 16,
     ...Platform.select({
       web: { boxShadow: "0 2px 12px rgba(0,0,0,0.06)" } as any,
       default: {
         shadowColor: "#000",
         shadowOffset: { width: 0, height: 2 },
         shadowOpacity: 0.12,
         shadowRadius: 6,
         elevation: 3,
       },
     }),
   },
-  cardTitle: { fontSize: 16, fontFamily: fonts.semiBold, color: "#000", marginBottom: 12 },
+  cardTitle: { fontSize: 16, fontFamily: fonts.semiBold, marginBottom: 12 },
   overviewRow: {
     flexDirection: "row",
     alignItems: "stretch",
-    backgroundColor: "#FFFFFF",
     borderRadius: 12,
     borderWidth: 1,
-    borderColor: "#E5E5E5",
     overflow: "hidden",
   },
   overviewItem: { flex: 1, padding: 12, alignItems: "center" },
-  overviewIcon: { backgroundColor: "#007AFF10", padding: 6, borderRadius: 10, marginBottom: 6 },
-  overviewLabel: { fontSize: 12, color: "#8E8E93", fontFamily: fonts.regular },
-  overviewValue: { fontSize: 16, color: "#000000", fontFamily: fonts.semiBold, marginTop: 2 },
-  overviewSub: { fontSize: 10, color: "#8E8E93", marginTop: 2 },
+  overviewIcon: { padding: 6, borderRadius: 10, marginBottom: 6 },
+  overviewLabel: { fontSize: 12, fontFamily: fonts.regular },
+  overviewValue: { fontSize: 16, fontFamily: fonts.semiBold, marginTop: 2 },
+  overviewSub: { fontSize: 10, marginTop: 2 },
   separator: { width: 1, backgroundColor: "#E5E5E5" },
   macroHeader: { flexDirection: "row", justifyContent: "space-between", marginBottom: 6 },
-  macroLabel: { fontSize: 12, color: "#000000", fontFamily: fonts.semiBold },
-  macroVal: { fontSize: 12, color: "#8E8E93", fontFamily: fonts.regular },
-  barTrack: { height: 8, borderRadius: 6, backgroundColor: "#F2F2F7", overflow: "hidden" },
+  macroLabel: { fontSize: 12, fontFamily: fonts.semiBold },
+  macroVal: { fontSize: 12, fontFamily: fonts.regular },
+  barTrack: { height: 8, borderRadius: 6, overflow: "hidden" },
   barFill: { height: 8, borderRadius: 6 },
   actionsGrid: { flexDirection: "row", flexWrap: "wrap", gap: 12 },
   actionTile: { width: (width - 16 * 2 - 12 * 3) / 4, alignItems: "center" },
   actionIconWrap: { padding: 10, borderRadius: 12, marginBottom: 6 },
-  actionLabel: { fontSize: 11, color: "#000000", fontFamily: fonts.semiBold, textAlign: "center" },
+  actionLabel: { fontSize: 11, fontFamily: fonts.semiBold, textAlign: "center" },
   chipsRow: { flexDirection: "row", flexWrap: "wrap", gap: 8, marginBottom: 8 },
   chipsWrap: { flexDirection: "row", flexWrap: "wrap", gap: 8 },
-  chip: { backgroundColor: "#007AFF", borderRadius: 18, paddingVertical: 8, paddingHorizontal: 12 },
+  chip: { borderRadius: 18, paddingVertical: 8, paddingHorizontal: 12 },
   chipText: { fontFamily: fonts.semiBold, fontSize: 12 },
   toolsRow: { flexDirection: "row", flexWrap: "wrap", gap: 10 },
   toolBtn: {
     flexDirection: "row",
     alignItems: "center",
     gap: 6,
     borderWidth: 1,
-    borderColor: "#E5E5E5",
     borderRadius: 10,
     paddingVertical: 10,
     paddingHorizontal: 12,
-    backgroundColor: "#FFFFFF",
   },
-  toolBtnText: { fontFamily: fonts.semiBold, color: "#000000", fontSize: 12 },
+  toolBtnText: { fontFamily: fonts.semiBold, fontSize: 12 },
-  previewWrap: {
-    backgroundColor: "#FFFFFF",
+  previewWrap: {
     borderRadius: 10,
     padding: 8,
     borderWidth: 1,
-    borderColor: "#E5E5E5",
   },
   modalOverlay: { flex: 1, backgroundColor: "rgba(0,0,0,0.5)", justifyContent: "center", alignItems: "center" },
-  modalContent: { backgroundColor: "#FFFFFF", borderRadius: 16, padding: 24, width: "90%", maxWidth: 400 },
-  modalTitle: { fontSize: 20, fontFamily: fonts.bold, color: "#000000", textAlign: "center", marginBottom: 20 },
-  modalInput: { backgroundColor: "#F2F2F7", borderRadius: 8, padding: 12, fontSize: 16, fontFamily: fonts.regular, marginBottom: 20 },
+  modalContent: { borderRadius: 16, padding: 24, width: "90%", maxWidth: 400 },
+  modalTitle: { fontSize: 20, fontFamily: fonts.bold, textAlign: "center", marginBottom: 20 },
+  modalInput: { borderRadius: 8, padding: 12, fontSize: 16, fontFamily: fonts.regular, marginBottom: 20 },
   quickWaterButtons: { flexDirection: "row", justifyContent: "space-around", marginBottom: 20 },
-  waterQuickButton: { backgroundColor: "#FFFFFF", borderRadius: 8, paddingVertical: 10, paddingHorizontal: 14, borderWidth: 1, borderColor: "#E5E5E5" },
+  waterQuickButton: { borderRadius: 8, paddingVertical: 10, paddingHorizontal: 14, borderWidth: 1 },
   modalButtons: { flexDirection: "row", justifyContent: "space-between" },
   modalButton: {
     flex: 1,
     padding: 12,
     borderRadius: 8,
     marginHorizontal: 8,
     alignItems: "center",
-    backgroundColor: "#F2F2F7",
   },
-  primaryModalButton: { backgroundColor: "#007AFF" },
-  modalButtonText: { fontSize: 16, fontFamily: fonts.semiBold, color: "#000000" },
-  primaryModalButtonText: { color: "#FFFFFF" },
+  primaryModalButton: {},
+  modalButtonText: { fontSize: 16, fontFamily: fonts.semiBold },
 });
diff --git a/src/context/ActivityContext.tsx b/src/context/ActivityContext.tsx
--- a/src/context/ActivityContext.tsx
+++ b/src/context/ActivityContext.tsx
@@ -88,12 +88,30 @@ export const ActivityProvider: React.FC<{ children: React.ReactNode }> = ({
     const id = `${uid}_${todayString}`;
     const ref = doc(db, "activities", id);
 
     // 1) Try Firestore
     try {
       const snap = await getDoc(ref);
       if (snap.exists()) {
-        const fromCloud = snap.data() as DailyActivity;
+        const raw = snap.data() as any;
+        const fromCloud: DailyActivity = {
+          ...(raw as any),
+          createdAt: raw?.createdAt?.toDate
+            ? raw.createdAt.toDate()
+            : new Date(raw?.createdAt || Date.now()),
+          workouts: Array.isArray(raw?.workouts)
+            ? raw.workouts.map((w: any) => ({
+                ...w,
+                timestamp: w?.timestamp?.toDate
+                  ? w.timestamp.toDate()
+                  : new Date(w?.timestamp || Date.now()),
+              }))
+            : [],
+          meals: Array.isArray(raw?.meals)
+            ? raw.meals.map((m: any) => ({
+                ...m,
+                timestamp: m?.timestamp?.toDate
+                  ? m.timestamp.toDate()
+                  : new Date(m?.timestamp || Date.now()),
+              }))
+            : [],
+        };
         if (typeof fromCloud.sleepHours !== "number") fromCloud.sleepHours = 0;
         setTodayActivity(fromCloud);
         await writeLocal(fromCloud);
         fetchingRef.current = false;
         return;
       }